---
layout: posts
header-img: "img/post-bg-2015a.jpeg"
title: Use jq to parse AWS CLI
categories:
- aws
- jq
tags:
- aws
- jq
- json
- describe-instances
- describe-subnets
---
#### list instances with instanceId, launchTime, state and stateReason
<pre>aws ec2 describe-instances --region us-east-2 |
    jq "[.Reservations | .[] | .Instances | .[] |
        {instanceId: .InstanceId, launchTime: .LaunchTime,
            state: .State, stateReason: .StateReason}]"</pre>

#### ec2 list instances with State and stateReason and launchTime
<pre>aws ec2 describe-instances --region us-east-2 | 
    jq "[.Reservations | .[] | .Instances | .[] |
        {instanceId: .InstanceId, launchTime: .LaunchTime, 
            state: .State, stateReason: .StateReason}]"</pre>

#### ec2 list instances that are running with instanceId and launchTime
<pre>aws ec2 describe-instances --region us-east-2 | 
    select(.State.Name == \"running\")" | jq "[ .Reservations | .[] |
     .Instances | .[] |
        {instanceId: .InstanceId, launchTime: .LaunchTime, 
            state: .State, stateReason: .StateReason} ]"</pre>

#### ec2 list VPC's and CIDRs
<pre>aws ec2 describe-vpcs | jq "[.Vpcs | .[] | .CidrBlock ]"</pre>

#### ec2 lisit subnets with subnetId and AZ 
<pre>aws ec2 describe-subnets | jq '[.Subnets|.[]|{Subnet:.SubnetId,AZ:.AvailabilityZone}]'</pre>

#### ec2 list amiId , instanceId and privateIp
<pre>aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1 |
 jq -c '.Reservations | .[] | .Instances | .[] | 
    select (.ImageId == ${AMIID}) | .InstanceId,.PrivateIpAddress'</pre>

#### ConfigService get rule names that do not contain a string
<pre>aws configservice describe-config-rules --profile $PROFILE_NAME --region us-east-1 | 
    jq -c '.ConfigRules| .[] | select(.ConfigRuleName | 
        test("AWSControlTower") | not) | .ConfigRuleName'</pre>

#### ec2 describe-key-pairs that start with string
<pre>aws ec2 describe-key-pairs 
    --profile $PROFILE_NAME --region us-east-1 
        | jq -c '.KeyPairs | .[] | select( .KeyName | startswith("test-string"))'</pre>

#### ec2 describe-instances select "Name" tags, launchTime, PubDNSName
<pre>aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1 \
    | jq '.Reservations | .[] | .Instances | .[] \
    | [(.Tags[]|select(.Key=="Name")|.Value), .LaunchTime, .PublicDnsName ]' 
[
  "instance1",
  "2021-07-30T18:55:23+00:00",
  "ec2-3-86-245-113.compute-1.amazonaws.com"
]
[
  "instance2",
  "2021-07-30T18:55:23+00:00",
  "ec2-52-91-167-140.compute-1.amazonaws.com"
]
</pre>

#### Name Tags
<pre>
aws ec2 describe-instances --profile ${PROFILE_NAME} --region us-east-1 | jq '.Reservations | .[] | .Instances | .[] | [(.Tags[]|select(.Key=="Name")|.Value)]'
</pre>

#### PrivateIpAddress
<pre>
aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1 | jq '.Reservations | .[] | .Instances | .[] | [(.Tags[]|select(.Key=="Name")|.Value), .LaunchTime, .PrivateIpAddress ]'
</pre>

#### KeyName and PrivateIpAddress
<pre>
% aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1 | jq '.Reservations | .[] | .Instances | .[] | [(.Tags[]|select(.Key=="Name")|.Value), .KeyName, .PrivateIpAddress ]'
</pre>

#### Add All Users to a Specific Group
<pre>
for i in `aws iam list-users --profile $PROFILE_NAME | jq ".[] | .[] | .UserName" | sed 's/"//g'`; do aws iam add-user-to-group --user-name ${i} --group-name ReadOnly --profile $PROFILE_NAME; done 
</pre>

#### Search for an IAM user across multiple profiles
<pre>for i in dev qa production; do echo $i; aws iam list-users --profile $i  | jq '.[] | .[] | select(.UserName | startswith("jdoe"))'; done</pre>

#### Search for instances with Name tags
<pre> aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1  | jq -c '.Reservations | .[] | .Instances  |.[] | [(.Tags[]|select(.Key=="Name")|.Value), .LaunchTime, .PublicDnsName ]'</pre>

#### Search for instances with Name and Patch Group tags
<pre>
aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1  | jq -c '.Reservations | .[] | .Instances  |.[] | [(.Tags[]|select(.Key=="Patch Group")|.Value), (.Tags[]|select(.Key=="Name")|.Value), .LaunchTime ]'                

["dev-windows","windows_server","2022-04-07T05:10:41+00:00"]
</pre>

#### Search for instances, return Name, LaunchTime, InstanceId, PrivateIp, KeyName
<pre>
aws ec2 describe-instances --profile $PROFILE_NAME --region us-east-1 | jq '.Reservations | .[] | .Instances | .[]  | [(.Tags[]|select(.Key=="Name")|.Value), .LaunchTime, .InstanceId, .PrivateIpAddress, .KeyName ]'
</pre>

#### List instance profiles (Roles)####
<pre>
aws ec2 describe-instances  --region us-east-1 --profile $PROFILE_NAME  | jq '.Reservations | .[] | .Instances | .[] | (.Tags[]|select(.Key=="Name")|.Value), .IamInstanceProfile'
</pre>

#### List instances with searched Tag Values
Returns InstanceId for all instances, maybe try a --query to limit?
<pre>
aws ec2 describe-instances --profile tools-dev --region us-east-1 | jq '.Reservations | .[] | .Instances | .[] | (.Tags[]|select(.Value | startswith("tools"))), .InstanceId'
</pre>

#### List Lambda Functions on Python 3.6
<pre>
aws lambda list-functions --function-version ALL --region us-east-1 --output text --query "Functions[?Runtime=='python3.6'].FunctionArn" --profile tools-root
</pre>

### Scratch -- Searching on Tag Names
<pre>
for PROFILE in dev prod; do echo $PROFILE; do aws ec2 describe-instances --profile $PROFILE --region us-east-1  | jq -c '.Reservations | .[] | .Instances  |.[] | [(.Tags[]|select(.Value | contains("tools"))), .State ]'; done 

aws ec2 describe-instances  --profile tools-dev --region us-east-1 | jq '.Reservations[].Instances[] | (.Tags[]|select(.Value | contains("bastion"))), .InstanceId'
	"i-0c2438fb1429c3e35"
	"i-0d5e202b039b57392"
	"i-0ad65948bfcb6f0b7"
	"i-094507623837eef6f"
	{
	  "Key": "Name",
	  "Value": "dev-tools"
	}



aws ec2 describe-instances --query 'Reservations[].Instances[].{InstanceId:InstanceId, Tag:Tags[?Key==`Name`].Value}'  --profile tools-dev --region us-east-1
	[
	    {
	        "InstanceId": "i-0c2438fb1429c3e35",
	        "Tag": [
	            "windows-tools"
	        ]
	    },
	    {
	        "InstanceId": "i-0d5e202b039b57392",
	        "Tag": [
	            "tools-1"
	        ]
	    },
</pre>